function net = cnn_cifar_init(varargin)
opts.networkType = 'simplenn' ;
opts = vl_argparse(opts, varargin) ;

lr = [.1 2] ;

% Define network CIFAR10-quick
net.layers = {} ;

% Block 1

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(3,3,3,8, 'single'), 0.01 * randn(1, 8, 'single')}}, ...
                           'learningRate',lr, ...
                           'stride', 1, ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 1, ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'log') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(3,3,8,8, 'single'), 0.01 * randn(1, 8, 'single')}}, ...
                           'learningRate',lr, ...
                           'stride', 1, ...
                           'pad', 1) ;
                       
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 1, ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'log') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(3,3,8,4, 'single'), 0.01*randn(1, 4, 'single')}}, ...
                           'learningRate',lr, ...
                           'stride', 1, ...
                           'pad', 1) ;                      
net.layers{end+1} = struct('type', 'log') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(3,3,4,16, 'single'), 0.01*randn(1, 16, 'single')}}, ...
                           'learningRate',lr, ...
                           'stride', 1, ...
                           'pad', 1) ;

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ;
net.layers{end+1} = struct('type', 'log') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(3,3,16,8, 'single'), 0.01*randn(1, 8, 'single')}}, ...
                           'learningRate',lr, ...
                           'stride', 1, ...
                           'pad', 1) ;

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ;
net.layers{end+1} = struct('type', 'log') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(3,3,8,64, 'single'), 0.01*randn(1, 64, 'single')}}, ...
                           'learningRate',lr, ...
                           'stride', 1, ...
                           'pad', 1) ;

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ;
net.layers{end+1} = struct('type', 'log') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(3,3,64,16, 'single'), 0.01*randn(1, 16, 'single')}}, ...
                           'learningRate',lr, ...
                           'stride', 1, ...
                           'pad', 1) ;

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ;
net.layers{end+1} = struct('type', 'log') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(3,3,16,10, 'single'), 0.01*randn(1, 10, 'single')}}, ...
                           'learningRate',lr, ...
                           'stride', 1, ...
                           'pad', 1) ;

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ;                       
% Loss layer
net.layers{end+1} = struct('type', 'softmaxloss') ;

% Meta parameters
net.meta.inputSize = [32 32 3] ;
net.meta.trainOpts.learningRate = [0.05*ones(1,100) 0.005*ones(1,100) 0.0005*ones(1,100)] ;
net.meta.trainOpts.weightDecay = 0.0001 ;
net.meta.trainOpts.batchSize = 100 ;
net.meta.trainOpts.numEpochs = numel(net.meta.trainOpts.learningRate) ;

% Fill in default values
net = vl_simplenn_tidy(net) ;

% Switch to DagNN if requested
switch lower(opts.networkType)
  case 'simplenn'
    % done
  case 'dagnn'
    net = dagnn.DagNN.fromSimpleNN(net, 'canonicalNames', true) ;
    net.addLayer('error', dagnn.Loss('loss', 'classerror'), ...
             {'prediction','label'}, 'error') ;
  otherwise
    assert(false) ;
end

